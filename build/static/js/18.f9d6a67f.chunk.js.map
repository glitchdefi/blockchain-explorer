{"version":3,"sources":["app/pages/TransactionDetailsPage/components/InfoDetailCard/Status.js","app/pages/TransactionDetailsPage/components/InfoDetailCard/index.js","app/pages/TransactionDetailsPage/components/TabSections.js","app/pages/TransactionDetailsPage/index.js","app/components/Tab/Horizontal/Tabs.js","app/components/Tab/Horizontal/Tab.js","app/components/Tab/Horizontal/TabPanel.js","app/components/Tag/types.js","app/components/Tag/utils.js","../node_modules/use-constant/dist/use-constant.esm.js","app/components/InfoRow/index.js"],"names":["Status","status","buttonLabel","Wrapper","tw","div","Text","styled","TextBase","type","css","getColor","Button","ButtonBase","InfoDetailCard","t","useTranslation","renderInfoRow","label","value","customValueComp","InfoRow","TabSections","TransactionDetailsPage","Tabs","Tab","children","onClick","labelStyles","props","useTabState","isActive","onChangeTab","className","TabPanel","isCard","usePanelState","Types","success","pending","default","processing","useConstant","fn","ref","useRef","current","v","labelWrapStyles","rest","Container","Content","isValidElement","cloneElement","LabelWrapper"],"mappings":"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","file":"static/js/18.f9d6a67f.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport tw, { css, styled } from \"twin.macro\";\n\nimport { getColor } from \"src/app/components/Tag/utils\";\n\n// Components\nimport { Text as TextBase } from \"src/app/components/Text\";\nimport { Button as ButtonBase } from \"src/app/components/Button\";\n\nexport function Status({ status, buttonLabel }) {\n  return (\n    <Wrapper>\n      <Text>{status}</Text>\n      <Button>{buttonLabel}</Button>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = tw.div`flex flex-wrap items-center`;\n\nexport const Text = styled(TextBase)((type) => [\n  tw`text-base`,\n  css`\n    color: ${getColor(type)};\n  `,\n]);\n\nconst Button = styled(ButtonBase)(() => [\n  tw`bg-transparent border border-primary border-solid ml-2 lg:ml-10`\n]);\n\nStatus.propTypes = {\n  status: PropTypes.string,\n  buttonLabel: PropTypes.string,\n};\n","import React from \"react\";\nimport tw from \"twin.macro\";\nimport { useTranslation } from \"react-i18next\";\n\n// Components\nimport { LinkExternal } from \"src/app/components/Link/LinkExternal\";\nimport { InfoRow } from \"src/app/components/InfoRow\";\nimport { Status } from \"./Status\";\n\nexport function InfoDetailCard() {\n  const { t } = useTranslation();\n\n  const renderInfoRow = ({ label, value, customValueComp }) => {\n    return (\n      <InfoRow label={label} value={value} customValueComp={customValueComp} />\n    );\n  };\n\n  return (\n    <Wrapper>\n      {renderInfoRow({\n        label: t(\"transactionDetails.transaction_hash\"),\n        value:\n          \"0x8536eb2fd19553eba8ea82cd055a69d0ea94cfbe43a39cecea9f30cbc7ecf9eb\",\n      })}\n\n      {renderInfoRow({\n        label: t(\"common.status\"),\n        customValueComp: (\n          <Status status=\"Success\" buttonLabel=\"100 Blocks Confirmations\" />\n        ),\n      })}\n\n      {renderInfoRow({\n        label: t(\"common.block\"),\n        value: \"111111\",\n      })}\n\n      {renderInfoRow({\n        label: t(\"common.timeStamp\"),\n        value:\n          \"1 hr 14 mins ago (Jan-17-2021 03:30:52 PM +UTC) | Confirmed within 30 secs\",\n      })}\n\n      {renderInfoRow({\n        label: t(\"common.from\"),\n        customValueComp: (\n          <LinkExternal tw=\"underline\">\n            5A0b54D5dc17e0AadC3832sdsads55858\n          </LinkExternal>\n        ),\n      })}\n\n      {renderInfoRow({\n        label: t(\"common.to\"),\n        customValueComp: (\n          <LinkExternal tw=\"underline\">\n            5A0b54D5dc17e0AadC3832sdsads55858\n          </LinkExternal>\n        ),\n      })}\n\n      {renderInfoRow({\n        label: t(\"common.txnFee\"),\n        value: \"0.0001 GLCH\",\n      })}\n    </Wrapper>\n  );\n}\n\nexport const Wrapper = tw.div`w-full px-1 py-3 lg:pl-6`;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport \"twin.macro\";\n\n// Components\nimport { TableContainer as Wrapper } from \"src/app/components/Table\";\nimport {\n  TabContainer,\n  Tabs,\n  Tab,\n  TabPanel,\n} from \"src/app/components/Tab/Horizontal\";\nimport { InfoDetailCard } from \"./InfoDetailCard\";\n\nexport function TabSections() {\n  const { t } = useTranslation();\n\n  return (\n    <Wrapper>\n      <TabContainer>\n        <Tabs tw=\"grid-cols-2 lg:grid-cols-4 mt-6\">\n          <Tab>{t(\"common.overview\")}</Tab>\n          <Tab>{t(\"common.state\")}</Tab>\n        </Tabs>\n\n        <TabPanel>\n          <InfoDetailCard />\n        </TabPanel>\n        <TabPanel>\n          <InfoDetailCard />\n        </TabPanel>\n      </TabContainer>\n    </Wrapper>\n  );\n}\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport \"twin.macro\";\n\n// Components\nimport { Text } from \"src/app/components/Text\";\nimport { TabSections } from \"./components/TabSections\";\n\nexport function TransactionDetailsPage() {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <div tw=\"mb-4\">\n        <Text tw=\"text-base lg:text-lg\">{t(\"transactionDetails.title\")}</Text>\n        <TabSections />\n      </div>\n    </>\n  );\n}\n","import tw from \"twin.macro\";\nexport const Tabs = tw.div`grid grid-cols-4 gap-2 md:gap-6 mt-8`;\n","import React from \"react\";\nimport tw, { styled, css, theme } from \"twin.macro\";\nimport { Button } from \"../../Button\";\nimport { Text } from \"../../Text\";\nimport { useTabState } from \"../hooks/useTabState\";\n\nexport function Tab({ children, onClick, labelStyles, ...props }) {\n  const { isActive, onChangeTab } = useTabState();\n  return (\n    <Wrapper\n      isActive={isActive}\n      onClick={() => {\n        onChangeTab();\n        onClick && onClick();\n      }}\n      {...props}\n    >\n      <Text\n        className=\"tab-label\"\n        css={[\n          tw`text-sm md:text-tiny lg:text-base uppercase font-bold text-primary!`,\n          labelStyles,\n        ]}\n      >\n        {children}\n      </Text>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled(Button)(({ isActive }) => [\n  tw`\n    w-full\n    py-3\n    lg:py-4\n  `,\n\n  css`\n    border-radius: 5px 5px 0px 0px;\n    background-color: ${theme`colors.bg6`};\n    overflow: hidden;\n    text-overflow: ellipsis;\n    word-wrap: break-word;\n\n    .tab-label {\n      color: ${isActive ? \"white\" : theme`colors.primary`} !important;\n      opacity: ${isActive ? \"100%\" : \"60%\"};\n      word-break: inherit;\n    }\n  `,\n\n  isActive && tw`bg-gradient-to-r from-primary to-secondary text-white`,\n]);\n","import React from \"react\";\nimport { theme, styled, css } from \"twin.macro\";\nimport { usePanelState } from \"../hooks/usePanelState\";\n\nexport function TabPanel({ children, isCard, ...props }) {\n  const { isActive } = usePanelState();\n\n  if (!isCard && !isActive) return null;\n\n  return (\n    <Wrapper {...props}>\n      <div className=\"tab-panel\">\n        <div className=\"inner\">{children}</div>\n      </div>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled.div(() => [\n  css`\n    border-radius: 0 0px 5px 5px;\n    position: relative;\n    padding-left: 12px;\n    padding-right: 12px;\n    &:before {\n      content: \"\";\n      display: block;\n      width: 30px;\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      background: ${theme`colors.secondary`};\n      opacity: 16%;\n      border-radius: 0 0px 5px 5px;\n    }\n    &:after {\n      content: \"\";\n      display: block;\n      width: 30px;\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      right: 0;\n      background: ${theme`colors.primary`};\n      opacity: 30%;\n      border-radius: 0 0px 5px 5px;\n    }\n    .inner {\n      position: relative;\n      z-index: 2;\n      background-color: ${theme`colors.bgPrimary`};\n      padding: 20px;\n      border-radius: 0 0px 5px 5px;\n    }\n  `,\n]);\n","export const Types = {\n  success: \"success\",\n  pending: \"pending\",\n  default: \"default\",\n  processing: \"processing\",\n};\n","import { theme } from \"twin.macro\";\nimport { Types } from \"./types\";\n\nexport const getColor = (type) => {\n  if (type === Types.success) {\n    return theme`colors.success`;\n  }\n\n  if (type === Types.pending) {\n    return theme`colors.pending`;\n  }\n\n  if (type === Types.processing) {\n    return theme`colors.info`;\n  }\n\n  return theme`colors.success`;\n};\n","import { useRef } from 'react';\n\nfunction useConstant(fn) {\n  var ref = useRef();\n\n  if (!ref.current) {\n    ref.current = {\n      v: fn()\n    };\n  }\n\n  return ref.current.v;\n}\n\nexport default useConstant;\n","import React, { cloneElement, isValidElement } from \"react\";\nimport PropTypes from \"prop-types\";\nimport tw from \"twin.macro\";\n\n// Components\nimport { InfoIcon } from \"src/app/components/Svg/Icons\";\nimport { Text as TextBase } from \"src/app/components/Text\";\n\nexport function InfoRow(props) {\n  const { label, labelWrapStyles, value, customValueComp, ...rest } = props;\n\n  const renderValue = () => {\n    if (isValidElement(customValueComp)) {\n      return cloneElement(customValueComp);\n    }\n\n    return <Text>{value}</Text>;\n  };\n\n  return (\n    <Container {...rest}>\n      <InfoIcon />\n      <Content className=\"info-row-content\">\n        <LabelWrapper css={[labelWrapStyles]}>\n          <Text tw=\"mb-1 lg:mb-0\">{label}:</Text>\n        </LabelWrapper>\n        {renderValue()}\n      </Content>\n    </Container>\n  );\n}\n\nconst Container = tw.div`mt-6 first:mt-0 flex w-full lg:items-center`;\nconst Content = tw.div`flex flex-col ml-2 lg:flex-grow lg:flex-row lg:ml-6`;\nconst LabelWrapper = tw.div`flex items-start lg:(items-center w-2/12)`;\nconst Text = tw(TextBase)`text-base text-textSecondary`;\n\nInfoRow.propTypes = {\n  label: PropTypes.string,\n  labelWrapStyles: PropTypes.any,\n  contentStyles: PropTypes.object,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  customValueComp: PropTypes.element,\n};\n"],"sourceRoot":""}